@page "/events"
@using EventEaseApp.Models
@using EventEaseApp.Pages.Events
@inject EventEaseApp.Services.EventManagerService EventManagerService
@inject NavigationManager NavigationManager
@implements IDisposable

<h3 class="mb-4">Events Manager</h3>


<div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
    <div class="col">
        <div class="card shadow-sm h-100 d-flex align-items-center justify-content-center border-dashed"
        style="cursor:pointer;" @onclick="ShowAddForm">
            <div class="card-body">
                <h1 class="display-3 text-muted">+</h1>
                <p class="text-muted">Add Event</p>
            </div>
        </div>
    </div>

    @if (EventManagerService.GetEvents().Any())
    {
    @foreach (var evt in EventManagerService.GetEvents())
        {
            <div class="col">
                <EventCard 
                        Event="evt" EventChanged="@OnEventChanged" OnDelete="() => DeleteEvent(evt.Id)"/>
            </div>
        }
    } 
    else
    {
        <div class="alert alert-info">No events available. Try adding events first.</div>
    }
</div>


@if (showAddForm)
{
    @if (showAddForm)
    {
        <EditForm Model="newEvent" OnValidSubmit="AddEvent">
            <DataAnnotationsValidator/>
            <ValidationSummary/>

            <div class="mb-3">
                <InputText class="form-control" @bind-Value="newEvent.EventName" placeholder="Event Name" />
                <ValidationMessage For="@(() => newEvent.EventName)" />
            </div>

            <div class="mb-3">
                <InputTextArea class="form-control" @bind-Value="newEvent.EventDescription" placeholder="Description" />
                <ValidationMessage For="@(() => newEvent.EventDescription)" />
            </div>

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label class="form-label">Date</label>
                    <InputDate class="form-control" @bind-Value="eventDate" />
                    <ValidationMessage For="@(() => newEvent.EventDate)" />
                </div>
                <div class="col-md-6 mb-3">
                    <label class="form-label">Time</label>
                    <InputText type="time" class="form-control" @bind-Value="eventTime" />
                </div>
            </div>

            <div class="mb-3">
                <InputText class="form-control" @bind-Value="newEvent.EventLocation" placeholder="Location" />
                <ValidationMessage For="@(() => newEvent.EventLocation)" />
            </div>

            <button class="btn btn-primary me-2" type="submit">Save</button>
            <button class="btn btn-secondary" type="button" @onclick="() => showAddForm=false">Cancel</button>
        </EditForm>
    }
}
@code {
    private AppEvent newEvent = new AppEvent();
    private DateTime eventDate = DateTime.Now.Date;
    private string eventTime = DateTime.Now.ToString("HH:mm");
    private bool showAddForm = false;

    protected override void OnInitialized()
    {
        EventManagerService.OnEventsChanged += StateHasChanged;
    }

    public void Dispose()
    {
        EventManagerService.OnEventsChanged -= StateHasChanged;
    }

    private void ShowAddForm()
    {
        showAddForm = true;
    }
    private void AddEvent()
    {
        // Combine date and time
        if (TimeSpan.TryParse(eventTime, out var timeSpan))
        {
            var combinedDateTime = eventDate.Add(timeSpan);
            EventManagerService.AddEvent(newEvent.EventName!, newEvent.EventDescription!, combinedDateTime, newEvent.EventLocation!);
        }
        
        // Reset form
        newEvent = new AppEvent();
        eventDate = DateTime.Now.Date;
        eventTime = DateTime.Now.ToString("HH:mm");
        showAddForm = false;
    }
    private void DeleteEvent(int id)
    { 
        EventManagerService.DeleteEvent(id);
    }
    private void OnEventChanged(AppEvent updatedEvent)
    {
        EventManagerService.UpdateEvent(updatedEvent);
    }
}